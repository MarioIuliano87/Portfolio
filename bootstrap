import pandas as pd
import numpy as np
import sqlalchemy as sa
from scipy import stats
from sklearn.utils import resample
from pandas import ExcelWriter
import seaborn as sns
import matplotlib.pyplot as plt

# ----------------------------------------------------------#

# Creating connection and assigning SQL query results into 'df'
with engine.connect() as conn, conn.begin():
    df = pd.read_sql("""Select companyid,
       count(distinct session_sk) as sessions,
       count(eventgroup)          as event_count
from reporting.fact_gbq_events fge
         join reporting.dim_trafficsource dt
              on fge.trafficsource_sk = dt.trafficsource_sk and dt.trafficsource = 'external'
         join reporting.dim_eventaction de
              on fge.eventaction_sk = de.eventaction_sk
         left join "references".ref_eventgrouping re
                   on de.eventaction_name = re.eventaction
where 1 = 1
  and fge.isinteraction = true
  and fge.isdachhost = true
  and to_date(fge.date, 'YYYY-MM') = '2021-01-01'
group by 1""",conn)

def outliers(df,df_col1,df_col2):
    """
    :param df: dataframe
    :param df_col1: column to return where match found
    :param df_col2: column to perform outlier calculation on
    :return:
    """
    q3= np.percentile(df_col2,75)
    q1 = np.percentile(df_col2,25)
    iqr = q3 - q1
    outlier = q3 + (1.5 * iqr)
    outlier_list = df_col1[df_col2 >= outlier]
    print("Outlier value: ", outlier, "\n Total Outliers: ", len(outlier_list), "\n % of total: ", round((len(outlier_list)/len(df))*100,2))
    return outlier_list

#Bootstrap
results = []
for n in range(1000):
    sample = resample(df['sessions'],n_samples=(int(len(df)*0.5)))
    results.append(sample.mean())
results= pd.Series(results)
print("Bootstrap Statistics: ")
print(f'original: {df["sessions"].mean()}')
print(f'bias: {results.mean() -df["sessions"].mean()}')
print(f'std.error: {results.std()}')
